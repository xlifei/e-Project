<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

 	<!-- 
		bean的扫描器，@Repository, @Service, @Controller, @Component(标注在有一些无法封层的类上)
	 -->
		<context:component-scan base-package="com.xulifei.e">
		<context:exclude-filter type="annotation"		
		expression="org.springframework.stereotype.Controller" />
	</context:component-scan>	

  
  <!-- 配置数据源,这里配置了，mybatis就不用配置了-->
<bean id="dataSource"  class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
   <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/ev2?useUnicode=true&amp;characterEncoding=UTF-8"></property>
   <property name="user" value="root"></property>
   <property name="password" value="123"></property>
</bean>


<!-- 配置session工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:myBatis-config.xml" />
		<!--配置扫描式加载SQL映射文件,记得去掉mybatis-config配置-->
		<property name="mapperLocations" value="classpath:com/xulifei/e/dao/*.xml"/>
	</bean>
	
	<!-- 配置事务管理器,管理数据源事务处理-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置事务通知 -->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
<!-- 默认只处理运行时异常，可加rollback-for="Exception/Throwable"等处理所有异常或包括错误 -->
		
				<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="login*" propagation="REQUIRED"  rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED"  rollback-for="Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="select*" read-only="true" />
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*" propagation="SUPPORTS" />
			 
		
		</tx:attributes>
	</tx:advice>
	<!-- 配置切面织入的范围,后边要把事务边界定在service层 -->
	<aop:config>
		<aop:advisor advice-ref="advice" pointcut="execution(* com.xulifei.e.service.impl.*.*(..))"/>
	</aop:config>
	<!-- 配置SessionTemplate，已封装了繁琐的数据操作-->
	<!--<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">-->
		<!--<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>		-->
	<!--</bean>-->


	<!-- 配置 转换器，对于在basePackage设置的包（包括子包）下的接口类，
        如果接口类的全类名在Mapper.xml文件中和定义过命名空间一致，
         将被转换成spring的BEAN，在调用
            的地方通过@Autowired方式将可以注入接口实例 -->

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="basePackage" value="com.xulifei.e.dao" />
	</bean>


</beans>
